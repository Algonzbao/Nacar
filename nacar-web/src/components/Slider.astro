---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";

const shields = await getCollection("shields");
const totalItems = shields.length;
---

<div class="relative overflow-hidden w-full">
    <div
        id="slider-track"
        class="flex items-center transition-transform duration-700"
    >
        {
            // Duplicar escudos para efecto infinito
            [...shields, ...shields].map((shield, index) => {
                const { data } = shield;
                const { name, image } = data;
                return (
                    <div
                        key={index}
                        class="shield-container flex-shrink-0 flex flex-col items-center text-center"
                    >
                        {/* Imagen del escudo */}
                        <div class="flex items-center justify-center h-32 md:h-40 lg:h-48">
                            <Image
                                src={image}
                                alt={`escudo-${name}`}
                                class="h-full w-auto object-contain rounded-lg"
                            />
                        </div>

                        {/* Texto del escudo */}
                        <div class="mt-4">
                            <p class="text-xs md:text-sm lg:text-base font-bold text-gray-700">
                                {name}
                            </p>
                        </div>
                    </div>
                );
            })
        }
    </div>
</div>

<script>
    let offset = 0;
    let intervalId = null;

    const initSlider = () => {
        const track = document.getElementById("slider-track");

        if (!track) return;

        const updateTrackStyles = () => {
            const width = window.innerWidth;
            const itemsVisible = width >= 1024 ? 4 : width >= 768 ? 2 : 1;
            const gap = width >= 1024 ? 32 : 16;
            const shieldWidth = (track.offsetWidth - (itemsVisible - 1) * gap) / itemsVisible;

            track.style.setProperty("--gap", `${gap}px`);
            track.style.setProperty("--items-visible", itemsVisible);
            track.style.setProperty("--shield-width", `${shieldWidth}px`);
        };

        window.addEventListener("resize", updateTrackStyles);
        updateTrackStyles();

        const totalShields = track.children.length / 2;

        if (intervalId) clearInterval(intervalId); // Limpia el intervalo previo

        intervalId = setInterval(() => {
            if (!totalShields || totalShields <= 0) return;

            const shieldWidth = parseInt(getComputedStyle(track).getPropertyValue("--shield-width"));
            const gap = parseInt(getComputedStyle(track).getPropertyValue("--gap"));

            offset = (offset + 1) % totalShields;

            let centerOffset = 0;
            for (let i = 0; i < offset; i++) {
                centerOffset += shieldWidth + gap;
            }

            track.style.transform = `translateX(-${centerOffset}px)`;
        }, 2000);
    };

    document.addEventListener("astro:page-load", initSlider); // Re-inicia al cargar la p치gina
    document.addEventListener("visibilitychange", () => {
        if (document.visibilityState === "visible") {
            initSlider();
        } else if (intervalId) {
            clearInterval(intervalId); // Pausa el slider cuando la p치gina no est치 visible
        }
    });
</script>


<style>
    #slider-track {
        display: flex;
        transition: transform 0.7s ease;
        gap: var(--gap); /* Espaciado entre los elementos */
    }

    .shield-container {
        flex: 0 0 var(--shield-width); /* Ajuste din치mico para cada elemento */
    }
</style>
